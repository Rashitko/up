#!/usr/bin/env python3

import argparse
import os
import re
from string import Template

import yaml

from up.explorer import Explorer
from up.package_manager import UpPackageManager

CONFIG_DIR_NAME = 'config'
LOGS_DIR_NAME = 'logs'
FLIGHT_CONTROLLER_DIR_NAME = 'flight_controller'
RECORDERS_DIR_NAME = 'recorders'
COMMANDS_DIR_NAME = 'commands'
MODULES_DIR_NAME = 'modules'

GIT_URL = 'git+git://github.com/Rashitko/up'

CREATOR = "create"
CREATOR_SHORT = 'c'
CREATOR_ACTIONS = [CREATOR, CREATOR_SHORT]

MODULE = 'module'
MODULE_SHORT = 'm'

HANDLER = 'handler'
HANDLER_SHORT = 'h'

NEW_APP = 'new'
NEW_APP_SHORT = 'n'

START = 'start'
START_SHORT = 's'

UPDATE = 'update'
UPDATE_SHORT = 'u'

GATHER = 'gather'
GATHER_SHORT = 'g'

COG = 'cog'

REGISTER = 'register'
REGISTER_SHORT = 'r'

EXPLORE = 'explore'
EXPLORE_SHORT = 'e'

NAME_SWITCH = '-n'
NAME_LONG_SWITCH = '--name'

TYPE_SWITCH = '-t'
TYPE_LONG_SWITCH = '--type'
TYPE_THREAD = 'thread'
TYPE_STARTED = 'started'

IDENTIFIER_SWITCH = '-i'
IDENTIFIER_LONG_SWITCH = '--identifier'

HANDLER_CREATORS = [HANDLER, HANDLER_SHORT]
MODULES_CREATORS = [MODULE, MODULE_SHORT]
NEW_APP_CREATORS = [NEW_APP, NEW_APP_SHORT]
COG_CREATORS = [COG]
START_ACTIONS = [START, START_SHORT]
UPDATE_ACTIONS = [UPDATE, UPDATE_SHORT]
GATHER_ACTIONS = [GATHER, GATHER_SHORT]
REGISTER_ACTIONS = [REGISTER, REGISTER_SHORT]
COG_ACTIONS = [COG]
EXPLORE_ACTIONS = [EXPLORE, EXPLORE_SHORT]


def create_command_handler(path, name, identifier):
    source_template = """from up.commands.command import BaseCommand, BaseCommandHandler


class ${name}Command(BaseCommand):
    NAME = '$identifier'

    def __init__(self):
        super().__init__(${name}Command.NAME)


class ${name}CommandHandler(BaseCommandHandler):
    def __init__(self):
        super().__init__()

    def run_action(self, command):
        if command is None:
            return None
"""
    source = Template(source_template).substitute(name=name, identifier=identifier)
    f = open(path, 'w+')
    f.write(source)
    f.close()


def create_module(path, name, module_type):
    source_template = """from up.base_${module_type}_module import Base${module_type_cap}Module


class ${name}Module(Base${module_type_cap}Module):
    def __init__(self):
        super().__init__()

    def _execute_initialization(self):
        super()._execute_initialization()

    def _execute_start(self):
        super()._execute_start()
        return True

    def _execute_stop(self):
        super()._execute_stop()
"""
    if module_type == 'thread':
        source_template += """
    def _loop(self):
        pass
"""
    source_template += """
    def load(self):
        return True
"""
    source = Template(source_template).substitute(name=name, module_type=module_type,
                                                  module_type_cap=module_type.capitalize())
    f = open(path, 'w+')
    f.write(source)
    f.close()


def create_app(name):
    cwd = os.getcwd()
    dest_dir = os.path.join(cwd, name)
    print("Using New App Generator")
    print("\t Path: %s" % dest_dir)
    if os.path.isdir(dest_dir):
        confirmation = None
        while confirmation not in ['y', 'n', 'c']:
            confirmation = input("Directory already exists. Proceed anyway? (y - yes | n - no | c - cancel) ")
            if confirmation in ['c', 'n']:
                exit(1)
    os.makedirs(dest_dir, exist_ok=True)
    touch(dest_dir, 'external_modules.yml')
    touch(dest_dir, 'UpFile')
    touch(dest_dir, 'Cogfile.yml')
    touch(dest_dir, 'main.py')
    source_template = """from up.utils.new_loader import NewUpLoader

def main():
  up = NewUpLoader().create()
  try:
    up.initialize()
    up.run()
  finally:
    up.stop()

if __name__ == "__main__":
  main()
"""
    source = Template(source_template).substitute()
    f = open(os.path.join(dest_dir, 'main.py'), 'w')
    f.write(source)
    f.close()
    touch(dest_dir, '__init__.py')

    create_sub_dir(dest_dir, MODULES_DIR_NAME)
    create_sub_dir(dest_dir, COMMANDS_DIR_NAME)
    create_sub_dir(dest_dir, FLIGHT_CONTROLLER_DIR_NAME)
    create_sub_dir(dest_dir, LOGS_DIR_NAME, create_init=False)
    cfg_dir = create_sub_dir(dest_dir, CONFIG_DIR_NAME, create_init=False)
    global_cfg_path = touch(cfg_dir, 'config.yml')
    f = open(global_cfg_path, 'w')
    f.write("""log level: info # Possible values are DEBUG, INFO, WARNING, ERROR
""")
    f.close()
    modules_cfg_path = touch(cfg_dir, 'disabled_modules.yml')
    f = open(modules_cfg_path, 'w')
    f.write("""disabled modules:
""")
    f.close()


def create_cog(name):
    cwd = os.getcwd()
    cog_name = '%s_cog' % to_snake_case(name)
    dest_dir = os.path.join(cwd, cog_name)
    print("Using Cog Generator")
    print("\t Path: %s" % dest_dir)
    if os.path.isdir(dest_dir):
        print("\t Dir already exists!")
        return
    os.makedirs(dest_dir)
    with open(os.path.join(dest_dir, '.gitignore'), 'w+') as gitignore:
        gitignore.write("""\
build
%s.egg_info
""" % (cog_name))
    create_sub_dir(dest_dir, cog_name)
    with open(os.path.join(dest_dir, cog_name, 'registrar.py'), 'w+') as registrar:
        registrar.write("""\
from up.registrar import UpRegistrar


class Registrar(UpRegistrar):

    NAME = '%s'

    def __init__(self):
        super().__init__(self.NAME)

    def register(self):
        external_modules = self._load_external_modules()
        if external_modules is not None:
            # register all your modules
            self._write_external_modules()
        return True

""" % (cog_name))
    create_sub_dir(os.path.join(dest_dir, cog_name), MODULES_DIR_NAME)
    create_sub_dir(os.path.join(dest_dir, cog_name), COMMANDS_DIR_NAME)
    create_sub_dir(os.path.join(dest_dir, cog_name), RECORDERS_DIR_NAME)


def touch(dest, name):
    path = os.path.join(dest, name)
    open(path, 'w+').close()
    return path


def create_sub_dir(root, name, create_init=True):
    new_dir = os.path.join(root, name)
    os.makedirs(os.path.join(root, name), exist_ok=True)
    if create_init:
        touch(new_dir, '__init__.py')
    return new_dir


def to_snake_case(name):
    s1 = re.sub('(.)([A-Z][a-z]+)', r'\1_\2', name)
    return re.sub('([a-z0-9])([A-Z])', r'\1_\2', s1).lower()


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-f', '--file', type=str, default=None)
    subparsers = parser.add_subparsers(title='Available actions', help='generates a thing', dest='action')

    generate_parser = subparsers.add_parser(CREATOR, aliases=[CREATOR_SHORT])
    subparsers.add_parser(START, aliases=[START_SHORT])
    subparsers.add_parser(UPDATE, aliases=[UPDATE_SHORT])
    subparsers.add_parser(GATHER, aliases=[GATHER_SHORT])
    register_parser = subparsers.add_parser(REGISTER, aliases=[REGISTER_SHORT])
    explore_parser = subparsers.add_parser(EXPLORE, aliases=[EXPLORE_SHORT])

    l2_parsers = generate_parser.add_subparsers(title='Creators', help='available creators', dest='creator')

    handler_parser = l2_parsers.add_parser(HANDLER, aliases=[HANDLER_SHORT])
    handler_parser.add_argument(IDENTIFIER_SWITCH, IDENTIFIER_LONG_SWITCH, type=str, required=True)
    handler_parser.add_argument(NAME_SWITCH, NAME_LONG_SWITCH, type=str, required=True)

    modules_parser = l2_parsers.add_parser(MODULE, aliases=[MODULE_SHORT])
    modules_parser.add_argument(NAME_SWITCH, NAME_LONG_SWITCH, type=str, required=True)
    modules_parser.add_argument(TYPE_SWITCH, TYPE_LONG_SWITCH, type=str, choices=[TYPE_THREAD, TYPE_STARTED],
                                default=TYPE_STARTED)

    new_app_parser = l2_parsers.add_parser(NEW_APP, aliases=[NEW_APP_SHORT])
    new_app_parser.add_argument(NAME_SWITCH, NAME_LONG_SWITCH, type=str, required=True)

    cog_parser = l2_parsers.add_parser(COG)
    cog_parser.add_argument(NAME_SWITCH, NAME_LONG_SWITCH, type=str, required=True)

    register_parser.add_argument(NAME_SWITCH, NAME_LONG_SWITCH, type=str, required=True)
    explore_parser.add_argument(TYPE_SWITCH, TYPE_LONG_SWITCH, type=str, choices=['modules', 'recorders', 'all'],
                                default='all')
    explore_parser.add_argument('-w', '--write', action='store_true')

    args = parser.parse_args()
    action = args.action
    if action in CREATOR_ACTIONS:
        creator = args.creator
        if creator in HANDLER_CREATORS:
            name = args.name
            if args.file is None:
                args.file = './commands/%s_command.py' % to_snake_case(name)
            path = os.path.abspath(args.file)
            identifier = args.identifier
            print("Using Command Generator")
            print("\t Name: %s" % name)
            print("\t Identifier: %s" % identifier)
            print("\t Path: %s" % path)
            if os.path.isfile(path):
                confirmation = None
                while confirmation not in ['y', 'n', 'c']:
                    confirmation = input("File already exists. Overwrite? (y - yes | n - no | c - cancel) ")
                if confirmation in ['c', 'n']:
                    exit()
                if confirmation in ['y']:
                    print("\t Overwrite confirmed!")
            create_command_handler(path, name, identifier)
        elif creator in MODULES_CREATORS:
            name = args.name
            if args.file is None:
                args.file = './modules/%s_module.py' % to_snake_case(name)
            path = os.path.abspath(args.file)
            module_type = args.type
            print("Using Modules Generator")
            print("\t Name: %s" % name)
            print("\t Type: %s" % module_type.capitalize())
            print("\t Path: %s" % path)
            if os.path.isfile(path):
                confirmation = None
                while confirmation not in ['y', 'n', 'c']:
                    confirmation = input("File already exists. Overwrite? (y - yes | n - no | c - cancel) ")
                if confirmation in ['c', 'n']:
                    exit()
                if confirmation in ['y']:
                    print("\t Overwrite confirmed!")
            create_module(path, name, module_type)
        elif creator in NEW_APP_CREATORS:
            name = args.name
            create_app(name)
        elif creator in COG_CREATORS:
            name = args.name
            create_cog(name)
        else:
            generate_parser.print_help()
            exit(1)
    elif action in START_ACTIONS:
        cwd = os.getcwd()
        if not os.path.isfile(os.path.join(cwd, 'UpFile')):
            print("Not the Up Application. UpFile is missing. To generate new app use up generate new -n NAME_OF_APP")
            exit(1)
        os.system('PYTHONPATH=%s python %s' % (cwd, os.path.join(cwd, 'main.py')))
    elif action in UPDATE_ACTIONS:
        os.system('pip install --upgrade %s' % GIT_URL)
    elif action in GATHER_ACTIONS:
        upm = UpPackageManager()
        upm.load()
    elif action in REGISTER_ACTIONS:
        upm = UpPackageManager()
        upm.register(args.name)
    elif action in EXPLORE_ACTIONS:
        explorer = Explorer()
        if args.type == 'all':
            registered_modules = {
                'modules': explorer.explore_modules(),
                'recorders': explorer.explore_recorders()
            }
            print('\tFound modules: %s' % ', '.join([module['class_name'] for module in registered_modules['modules']]))
            print('\tFound recorders: %s' % ', '.join([recorder['class_name'] for recorder in registered_modules['recorders']]))
            if args.write:
                with open('registered_modules.yml', 'w+') as f:
                    print('\tWriting found modules and recorders')
                    yaml.dump(registered_modules, f)
        else:
            parser.print_help()
            exit(1)
    elif action is None:
        parser.print_help()
        exit(1)
    else:
        print("Action %s not supported" % action)


if __name__ == '__main__':
    main()
